// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String           @id @default(uuid())
  username        String           @unique
  fullname        String
  email           String           @unique
  password        String
  profile_image   String?
  banner          String?
  bio             String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  posts           Posts[]
  stories         Story[]
  likes           Like[]
  comments        Comment[]
  reposts         RePosts[]
  notifications   Notification[]    @relation("UserNotifications")
  relatedNotifications Notification[] @relation("RelatedUserNotifications")
  messagesSent    Messages[]         @relation("SenderMessages")
  messagesReceived Messages[]        @relation("ReceiverMessages")
  friends         Friends[]          @relation("UserFriends")
  friendOf        Friends[]          @relation("FriendUsers")
  followers       Followers[]        @relation("UserFollowers")
  following       Followers[]        @relation("UserFollowing")
  storyViewers    StoryViewer[]
  postViewers     PostsViewer[]
  commentViewers  CommentViewer[]
}

model Posts {
  id              Int               @id @default(autoincrement())
  usersId         String
  contentText     String?
  contentImage    String?
  mediaType       MediaType
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  users           Users              @relation(fields: [usersId], references: [id])
  comments        Comment[]
  likes           Like[]
  reposts         RePosts[]
  attachments     Attachment[]
  viewers         PostsViewer[]
  notifications   Notification[]
}

model Story {
  id              Int               @id @default(autoincrement())
  usersId         String
  contentText     String?
  contentMedia    String?
  mediaType       MediaType
  createdAt       DateTime           @de`fault(now())
  expirationTime  DateTime

  users           Users              @relation(fields: [usersId], references: [id])
  viewers         StoryViewer[]
  likes           Like[]
  comments        Comment[]
  attachments     Attachment[]
  notifications   Notification[]
}

model Like {
  id              Int               @id @default(autoincrement())
  usersId         String
  postsId         Int?
  storyId         Int?
  createdAt       DateTime           @default(now())

  users           Users              @relation(fields: [usersId], references: [id])
  posts           Posts?             @relation(fields: [postsId], references: [id])
  story           Story?             @relation(fields: [storyId], references: [id])
}

model Comment {
  id              Int               @id @default(autoincrement())
  usersId         String
  postsId         Int?
  storyId         Int?
  content         String
  mediaUrl        String?
  mediaType       MediaType
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  users           Users              @relation(fields: [usersId], references: [id])
  posts           Posts?             @relation(fields: [postsId], references: [id])
  story           Story?             @relation(fields: [storyId], references: [id])
  viewers         CommentViewer[]
  attachments     Attachment[]
  notifications   Notification[]
}

model RePosts {
  id              Int               @id @default(autoincrement())
  usersId         String
  originalPostsId Int
  createdAt       DateTime           @default(now())

  users           Users              @relation(fields: [usersId], references: [id])
  originalPosts   Posts              @relation(fields: [originalPostsId], references: [id])
}

model Attachment {
  id              Int               @id @default(autoincrement())
  postsId         Int?
  commentId       Int?
  storyId         Int?
  filePath        String
  fileType        FileType
  createdAt       DateTime           @default(now())

  posts           Posts?             @relation(fields: [postsId], references: [id])
  comment         Comment?           @relation(fields: [commentId], references: [id])
  story           Story?             @relation(fields: [storyId], references: [id])
}

model Notification {
  id              Int               @id @default(autoincrement())
  usersId         String
  relatedUsersId  String
  postsId         Int?
  commentId       Int?
  storyId         Int?
  type            NotificationType
  readStatus      Boolean            @default(false)
  createdAt       DateTime           @default(now())

  users           Users              @relation("UserNotifications", fields: [usersId], references: [id])
  relatedUsers    Users              @relation("RelatedUserNotifications", fields: [relatedUsersId], references: [id])
  posts           Posts?             @relation(fields: [postsId], references: [id])
  comment         Comment?           @relation(fields: [commentId], references: [id])
  story           Story?             @relation(fields: [storyId], references: [id])
}

model Messages {
  id              Int               @id @default(autoincrement())
  senderId        String
  receiverId      String
  contentText     String?
  mediaUrl        String?
  mediaType       MediaType
  readStatus      Boolean            @default(false)
  createdAt       DateTime           @default(now())

  sender          Users              @relation("SenderMessages", fields: [senderId], references: [id])
  receiver        Users              @relation("ReceiverMessages", fields: [receiverId], references: [id])
}

model Friends {
  id              Int               @id @default(autoincrement())
  usersId         String
  friendId        String
  friendStatus    FriendStatus
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  users           Users              @relation("UserFriends", fields: [usersId], references: [id])
  friend          Users              @relation("FriendUsers", fields: [friendId], references: [id])
}

model Followers {
  id              Int               @id @default(autoincrement())
  followerId      String
  followingId     String
  createdAt       DateTime           @default(now())

  follower        Users              @relation("UserFollowers", fields: [followerId], references: [id])
  following       Users              @relation("UserFollowing", fields: [followingId], references: [id])
}

model StoryViewer {
  id              Int               @id @default(autoincrement())
  storyId         Int
  usersId         String
  readAt          DateTime           @default(now())

  story           Story              @relation(fields: [storyId], references: [id])
  users           Users              @relation(fields: [usersId], references: [id])
}

model PostsViewer {
  id              Int               @id @default(autoincrement())
  postsId         Int
  usersId         String
  viewedAt        DateTime           @default(now())

  posts           Posts              @relation(fields: [postsId], references: [id])
  users           Users              @relation(fields: [usersId], references: [id])
}

model CommentViewer {
  id              Int               @id @default(autoincrement())
  commentId       Int
  usersId         String
  readAt          DateTime           @default(now())

  comment         Comment            @relation(fields: [commentId], references: [id])
  users           Users              @relation(fields: [usersId], references: [id])
}

enum MediaType {
  PHOTO
  VIDEO
  MUSIC
  TEXT
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  FRIEND_REQUEST
  REPOST
  MENTION
}